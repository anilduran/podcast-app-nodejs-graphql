type Query {
    users: [User!]!
    podcasts: [Podcast!]!
    podcastLists: [PodcastList!]!
    categories(cursor: ID, limit: Int!): CategoriesResult!
    me: User!
    podcastComments: [PodcastComment!]!
    podcastListComments: [PodcastListComment!]!
}

type Mutation {
    signIn(data: SignInInput!): String
    signUp(data: SignUpInput!): String

    createUser(data: CreateUserInput!): User!
    updateUser(id: ID!, data: UpdateUserInput): User!
    deleteUser(id: ID!): User!

    createPodcast(data: CreatePodcastInput!): Podcast!
    updatePodcast(id: ID!, data: UpdatePodcastInput!): Podcast!
    deletePodcast(id: ID!): Podcast!
    addPodcastToPodcastList(podcast: ID!, podcastList: ID!): Podcast!
    removePodcastFromPodcastList(podcast: ID!, podcastList: ID!): Podcast!

    createPodcastList(data: CreatePodcastListInput): PodcastList!
    updatePodcastList(id: ID!, data: UpdatePodcastListInput!): PodcastList!
    deletePodcastList(id: ID!): PodcastList!

    createPlaylist(data: CreatePlaylistInput!): Playlist!
    updatePlaylist(id: ID!, data: UpdatePlaylistInput!): Playlist!
    deletePlaylist(id: ID!): Playlist!
    addPodcastToPlaylist(playlist: ID!, podcast: ID!): Podcast!
    removePodcastFromPlaylist(playlist: ID!, podcast: ID!): Podcast!

    createCategory(data: CreateCategoryInput!): Category!
    updateCategory(id: ID!, data: UpdateCategoryInput!): Category!
    deleteCategory(id: ID!): Category!

    createPodcastComment(data: CreatePodcastCommentInput!): PodcastComment!
    updatePodcastComment(id: ID!, data: UpdatePodcastCommentInput!): PodcastComment!
    deletePodcastComment(id: ID!): PodcastComment!

    createPodcastListComment(data: CreatePodcastListCommentInput!): PodcastListComment!
    updatePodcastListComment(id: ID!, data: UpdatePodcastListCommentInput!): PodcastListComment!
    deletePodcastListComment(id: ID!): PodcastListComment!
    
    likePodcast(id: ID!): Podcast!
    unlikePodcast(id: ID!): Podcast!

    subscribePodcastList(id: ID!): PodcastList!
    unsubscribePodcastList(id: ID!): PodcastList!

    getPresignedUrlForImage: PresignedUrlResponse!
    getPresignedUrlForPodcast: PresignedUrlResponse!

}

scalar Date

type PageInfo {
    endCursor: ID!
    hasNextPage: Boolean!
}

type CategoriesResult {
    edges: [Category!]!
    pageInfo: PageInfo
}

type User {
    id: ID!
    username: String!
    email: String!
    password: String!
    profilePhotoUrl: String
    podcastLists: [PodcastList!]!
    podcasts: [Podcast!]!
    playlists: [Playlist!]!
    subscribedPodcastLists: [PodcastList!]!
    likedPodcasts: [Podcast!]!
    isDeleted: Boolean!
    createdAt: Date!
    updatedAt: Date!
    deletedAt: Date    
}

type Podcast {
    id: ID!
    name: String!
    description: String
    imageUrl: String!
    podcastUrl: String!
    creator: User!
    isVisible: Boolean!
    isDeleted: Boolean!
    createdAt: Date!
    updatedAt: Date!
    deletedAt: Date
    comments: [PodcastComment!]!
}

type PodcastList {
    id: ID!
    name: String!
    description: String
    imageUrl: String!
    creator: User!
    podcasts: [Podcast!]!
    categories: [Category!]!
    isVisible: Boolean!
    isDeleted: Boolean!
    createdAt: Date!
    updatedAt: Date!
    deletedAt: Date
    comments: [PodcastListComment!]!
}

type Playlist {
    id: ID!
    name: String!
    description: String
    imageUrl: String!
    creator: User
    podcasts: [Podcast!]!
    isDeleted: Boolean!
    createdAt: Date!
    updatedAt: Date!
    deletedAt: Date
}

type Category {
    id: ID!
    name: String!
    description: String
    podcastLists: [PodcastList!]!
}

type PodcastComment {
    content: String!
    user: User!
    podcast: Podcast!
    isDeleted: Boolean!
    createdAt: Date!
    updatedAt: Date!
    deletedAt: Date
}

type PodcastListComment {
    content: String!
    user: User!
    podcastList: PodcastList!
    isDeleted: Boolean!
    createdAt: Date!
    updatedAt: Date!
    deletedAt: Date
}


input CreateUserInput {
    username: String!
    email: String!
    password: String!
    profilePhotoUrl: String
}

input UpdateUserInput {
    username: String
    email: String
    password: String
    profilePhotoUrl: String
}

input CreatePodcastInput {
    name: String!
    description: String!
    imageUrl: String!
    podcastUrl: String!
    isVisible: Boolean!
    categories: [ID!]!
}

input UpdatePodcastInput {
    name: String
    description: String
    imageUrl: String
    podcastUrl: String
    isVisible: Boolean!
    categories: [ID!]
}

input CreatePodcastListInput {
    name: String!
    description: String
    imageUrl: String!
    isVisible: Boolean!
    categories: [ID!]!
}

input UpdatePodcastListInput {
    name: String
    description: String
    imageUrl: String
    isVisible: Boolean!
    categories: [ID!]
}

input CreateCategoryInput {
    name: String!
    description: String!
}

input UpdateCategoryInput {
    name: String
    description: String
}

input SignInInput {
    email: String!
    password: String!
}

input SignUpInput {
    username: String!
    email: String!
    password: String!
}

input CreatePlaylistInput {
    name: String!
    description: String
    imageUrl: String!
}

input UpdatePlaylistInput {
    name: String
    description: String
    imageUrl: String
}

input CreatePodcastCommentInput {
    content: String!
    podcast: ID!
}

input UpdatePodcastCommentInput {
    content: String
}

input CreatePodcastListCommentInput {
    content: String!
    podcastList: ID!
}

input UpdatePodcastListCommentInput {
    content: String
}

type PresignedUrlResponse {
    key: String!
    url: String!
}